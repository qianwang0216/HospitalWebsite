#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DB_69755_aspclass")]
public partial class linqSurveyDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void Insertquestion(question instance);
  partial void Updatequestion(question instance);
  partial void Deletequestion(question instance);
  partial void InsertSurvey(Survey instance);
  partial void UpdateSurvey(Survey instance);
  partial void DeleteSurvey(Survey instance);
  partial void Insertsurveyresponse(surveyresponse instance);
  partial void Updatesurveyresponse(surveyresponse instance);
  partial void Deletesurveyresponse(surveyresponse instance);
  #endregion
	
	public linqSurveyDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DB_69755_aspclassConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public linqSurveyDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public linqSurveyDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public linqSurveyDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public linqSurveyDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<surveypart> surveyparts
	{
		get
		{
			return this.GetTable<surveypart>();
		}
	}
	
	public System.Data.Linq.Table<question> questions
	{
		get
		{
			return this.GetTable<question>();
		}
	}
	
	public System.Data.Linq.Table<surveyquestion> surveyquestions
	{
		get
		{
			return this.GetTable<surveyquestion>();
		}
	}
	
	public System.Data.Linq.Table<Survey> Surveys
	{
		get
		{
			return this.GetTable<Survey>();
		}
	}
	
	public System.Data.Linq.Table<survpart> survparts
	{
		get
		{
			return this.GetTable<survpart>();
		}
	}
	
	public System.Data.Linq.Table<surveyresponse> surveyresponses
	{
		get
		{
			return this.GetTable<surveyresponse>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.surveypart")]
public partial class surveypart
{
	
	private int _SurveyID;
	
	private int _QuestionID;
	
	private System.Nullable<int> _OrderId;
	
	private string _Text;
	
	private string _QuestionType;
	
	private string _Options;
	
	public surveypart()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurveyID", DbType="Int NOT NULL")]
	public int SurveyID
	{
		get
		{
			return this._SurveyID;
		}
		set
		{
			if ((this._SurveyID != value))
			{
				this._SurveyID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL")]
	public int QuestionID
	{
		get
		{
			return this._QuestionID;
		}
		set
		{
			if ((this._QuestionID != value))
			{
				this._QuestionID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int")]
	public System.Nullable<int> OrderId
	{
		get
		{
			return this._OrderId;
		}
		set
		{
			if ((this._OrderId != value))
			{
				this._OrderId = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string Text
	{
		get
		{
			return this._Text;
		}
		set
		{
			if ((this._Text != value))
			{
				this._Text = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionType", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string QuestionType
	{
		get
		{
			return this._QuestionType;
		}
		set
		{
			if ((this._QuestionType != value))
			{
				this._QuestionType = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Options", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
	public string Options
	{
		get
		{
			return this._Options;
		}
		set
		{
			if ((this._Options != value))
			{
				this._Options = value;
			}
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.questions")]
public partial class question : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Text;
	
	private string _QuestionType;
	
	private string _Options;
	
	private EntitySet<surveyresponse> _surveyresponses;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnQuestionTypeChanging(string value);
    partial void OnQuestionTypeChanged();
    partial void OnOptionsChanging(string value);
    partial void OnOptionsChanged();
    #endregion
	
	public question()
	{
		this._surveyresponses = new EntitySet<surveyresponse>(new Action<surveyresponse>(this.attach_surveyresponses), new Action<surveyresponse>(this.detach_surveyresponses));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string Text
	{
		get
		{
			return this._Text;
		}
		set
		{
			if ((this._Text != value))
			{
				this.OnTextChanging(value);
				this.SendPropertyChanging();
				this._Text = value;
				this.SendPropertyChanged("Text");
				this.OnTextChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionType", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string QuestionType
	{
		get
		{
			return this._QuestionType;
		}
		set
		{
			if ((this._QuestionType != value))
			{
				this.OnQuestionTypeChanging(value);
				this.SendPropertyChanging();
				this._QuestionType = value;
				this.SendPropertyChanged("QuestionType");
				this.OnQuestionTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Options", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
	public string Options
	{
		get
		{
			return this._Options;
		}
		set
		{
			if ((this._Options != value))
			{
				this.OnOptionsChanging(value);
				this.SendPropertyChanging();
				this._Options = value;
				this.SendPropertyChanged("Options");
				this.OnOptionsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="question_surveyresponse", Storage="_surveyresponses", ThisKey="Id", OtherKey="QuestionID")]
	public EntitySet<surveyresponse> surveyresponses
	{
		get
		{
			return this._surveyresponses;
		}
		set
		{
			this._surveyresponses.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_surveyresponses(surveyresponse entity)
	{
		this.SendPropertyChanging();
		entity.question = this;
	}
	
	private void detach_surveyresponses(surveyresponse entity)
	{
		this.SendPropertyChanging();
		entity.question = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.surveyquestions")]
public partial class surveyquestion
{
	
	private int _Id;
	
	private int _SurveyID;
	
	private int _QuestionID;
	
	private System.Nullable<int> _OrderId;
	
	public surveyquestion()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL")]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this._Id = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurveyID", DbType="Int NOT NULL")]
	public int SurveyID
	{
		get
		{
			return this._SurveyID;
		}
		set
		{
			if ((this._SurveyID != value))
			{
				this._SurveyID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL")]
	public int QuestionID
	{
		get
		{
			return this._QuestionID;
		}
		set
		{
			if ((this._QuestionID != value))
			{
				this._QuestionID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int")]
	public System.Nullable<int> OrderId
	{
		get
		{
			return this._OrderId;
		}
		set
		{
			if ((this._OrderId != value))
			{
				this._OrderId = value;
			}
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Surveys")]
public partial class Survey : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Title;
	
	private string _Description;
	
	private System.DateTime _CreatedOn;
	
	private System.Nullable<System.DateTime> _ExpiresOn;
	
	private int _CreatedBy;
	
	private bool _Publish;
	
	private EntitySet<surveyresponse> _surveyresponses;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnExpiresOnChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiresOnChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnPublishChanging(bool value);
    partial void OnPublishChanged();
    #endregion
	
	public Survey()
	{
		this._surveyresponses = new EntitySet<surveyresponse>(new Action<surveyresponse>(this.attach_surveyresponses), new Action<surveyresponse>(this.detach_surveyresponses));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(200)")]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
	public System.DateTime CreatedOn
	{
		get
		{
			return this._CreatedOn;
		}
		set
		{
			if ((this._CreatedOn != value))
			{
				this.OnCreatedOnChanging(value);
				this.SendPropertyChanging();
				this._CreatedOn = value;
				this.SendPropertyChanged("CreatedOn");
				this.OnCreatedOnChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpiresOn", DbType="DateTime")]
	public System.Nullable<System.DateTime> ExpiresOn
	{
		get
		{
			return this._ExpiresOn;
		}
		set
		{
			if ((this._ExpiresOn != value))
			{
				this.OnExpiresOnChanging(value);
				this.SendPropertyChanging();
				this._ExpiresOn = value;
				this.SendPropertyChanged("ExpiresOn");
				this.OnExpiresOnChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
	public int CreatedBy
	{
		get
		{
			return this._CreatedBy;
		}
		set
		{
			if ((this._CreatedBy != value))
			{
				this.OnCreatedByChanging(value);
				this.SendPropertyChanging();
				this._CreatedBy = value;
				this.SendPropertyChanged("CreatedBy");
				this.OnCreatedByChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publish", DbType="Bit NOT NULL")]
	public bool Publish
	{
		get
		{
			return this._Publish;
		}
		set
		{
			if ((this._Publish != value))
			{
				this.OnPublishChanging(value);
				this.SendPropertyChanging();
				this._Publish = value;
				this.SendPropertyChanged("Publish");
				this.OnPublishChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Survey_surveyresponse", Storage="_surveyresponses", ThisKey="Id", OtherKey="SurveyID")]
	public EntitySet<surveyresponse> surveyresponses
	{
		get
		{
			return this._surveyresponses;
		}
		set
		{
			this._surveyresponses.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_surveyresponses(surveyresponse entity)
	{
		this.SendPropertyChanging();
		entity.Survey = this;
	}
	
	private void detach_surveyresponses(surveyresponse entity)
	{
		this.SendPropertyChanging();
		entity.Survey = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.survpart")]
public partial class survpart
{
	
	private string _Title;
	
	private string _Description;
	
	private System.DateTime _CreatedOn;
	
	private System.Nullable<System.DateTime> _ExpiresOn;
	
	private int _CreatedBy;
	
	private bool _Publish;
	
	private System.Nullable<int> _OrderId;
	
	private int _QuestionID;
	
	private int _SurveyID;
	
	private int _Id;
	
	private string _Options;
	
	private string _QuestionType;
	
	private string _Text;
	
	public survpart()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(200)")]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this._Title = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this._Description = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
	public System.DateTime CreatedOn
	{
		get
		{
			return this._CreatedOn;
		}
		set
		{
			if ((this._CreatedOn != value))
			{
				this._CreatedOn = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpiresOn", DbType="DateTime")]
	public System.Nullable<System.DateTime> ExpiresOn
	{
		get
		{
			return this._ExpiresOn;
		}
		set
		{
			if ((this._ExpiresOn != value))
			{
				this._ExpiresOn = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
	public int CreatedBy
	{
		get
		{
			return this._CreatedBy;
		}
		set
		{
			if ((this._CreatedBy != value))
			{
				this._CreatedBy = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publish", DbType="Bit NOT NULL")]
	public bool Publish
	{
		get
		{
			return this._Publish;
		}
		set
		{
			if ((this._Publish != value))
			{
				this._Publish = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int")]
	public System.Nullable<int> OrderId
	{
		get
		{
			return this._OrderId;
		}
		set
		{
			if ((this._OrderId != value))
			{
				this._OrderId = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL")]
	public int QuestionID
	{
		get
		{
			return this._QuestionID;
		}
		set
		{
			if ((this._QuestionID != value))
			{
				this._QuestionID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurveyID", DbType="Int NOT NULL")]
	public int SurveyID
	{
		get
		{
			return this._SurveyID;
		}
		set
		{
			if ((this._SurveyID != value))
			{
				this._SurveyID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL")]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this._Id = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Options", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
	public string Options
	{
		get
		{
			return this._Options;
		}
		set
		{
			if ((this._Options != value))
			{
				this._Options = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionType", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string QuestionType
	{
		get
		{
			return this._QuestionType;
		}
		set
		{
			if ((this._QuestionType != value))
			{
				this._QuestionType = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string Text
	{
		get
		{
			return this._Text;
		}
		set
		{
			if ((this._Text != value))
			{
				this._Text = value;
			}
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.surveyresponse")]
public partial class surveyresponse : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _SurveyID;
	
	private int _QuestionID;
	
	private string _Response;
	
	private System.Guid _FilledBy;
	
	private EntityRef<question> _question;
	
	private EntityRef<Survey> _Survey;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSurveyIDChanging(int value);
    partial void OnSurveyIDChanged();
    partial void OnQuestionIDChanging(int value);
    partial void OnQuestionIDChanged();
    partial void OnResponseChanging(string value);
    partial void OnResponseChanged();
    partial void OnFilledByChanging(System.Guid value);
    partial void OnFilledByChanged();
    #endregion
	
	public surveyresponse()
	{
		this._question = default(EntityRef<question>);
		this._Survey = default(EntityRef<Survey>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurveyID", DbType="Int NOT NULL")]
	public int SurveyID
	{
		get
		{
			return this._SurveyID;
		}
		set
		{
			if ((this._SurveyID != value))
			{
				if (this._Survey.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSurveyIDChanging(value);
				this.SendPropertyChanging();
				this._SurveyID = value;
				this.SendPropertyChanged("SurveyID");
				this.OnSurveyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL")]
	public int QuestionID
	{
		get
		{
			return this._QuestionID;
		}
		set
		{
			if ((this._QuestionID != value))
			{
				if (this._question.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnQuestionIDChanging(value);
				this.SendPropertyChanging();
				this._QuestionID = value;
				this.SendPropertyChanged("QuestionID");
				this.OnQuestionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Response", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string Response
	{
		get
		{
			return this._Response;
		}
		set
		{
			if ((this._Response != value))
			{
				this.OnResponseChanging(value);
				this.SendPropertyChanging();
				this._Response = value;
				this.SendPropertyChanged("Response");
				this.OnResponseChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilledBy", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid FilledBy
	{
		get
		{
			return this._FilledBy;
		}
		set
		{
			if ((this._FilledBy != value))
			{
				this.OnFilledByChanging(value);
				this.SendPropertyChanging();
				this._FilledBy = value;
				this.SendPropertyChanged("FilledBy");
				this.OnFilledByChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="question_surveyresponse", Storage="_question", ThisKey="QuestionID", OtherKey="Id", IsForeignKey=true)]
	public question question
	{
		get
		{
			return this._question.Entity;
		}
		set
		{
			question previousValue = this._question.Entity;
			if (((previousValue != value) 
						|| (this._question.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._question.Entity = null;
					previousValue.surveyresponses.Remove(this);
				}
				this._question.Entity = value;
				if ((value != null))
				{
					value.surveyresponses.Add(this);
					this._QuestionID = value.Id;
				}
				else
				{
					this._QuestionID = default(int);
				}
				this.SendPropertyChanged("question");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Survey_surveyresponse", Storage="_Survey", ThisKey="SurveyID", OtherKey="Id", IsForeignKey=true)]
	public Survey Survey
	{
		get
		{
			return this._Survey.Entity;
		}
		set
		{
			Survey previousValue = this._Survey.Entity;
			if (((previousValue != value) 
						|| (this._Survey.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Survey.Entity = null;
					previousValue.surveyresponses.Remove(this);
				}
				this._Survey.Entity = value;
				if ((value != null))
				{
					value.surveyresponses.Add(this);
					this._SurveyID = value.Id;
				}
				else
				{
					this._SurveyID = default(int);
				}
				this.SendPropertyChanged("Survey");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
